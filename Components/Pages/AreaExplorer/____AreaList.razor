@using ExodusMudClient.Data.Game.Models
@inject IAreaFileConverter AreaConverter


@if (Areas != null && Areas.Count > 0)
{
    <MudTable Items="@Areas" Dense="@true" Hover="@true" Bordered="@true" FixedHeader="@true" Class="mb-5"
        Filter="new Func<AreaFile?, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Exodus Areas</MudText>
            <MudSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Area Name</MudTh>
            <MudTh>File Name</MudTh>
            <MudTh>Lower Level</MudTh>
            <MudTh>Upper Level</MudTh>
            <MudTh>Creator</MudTh>
            <MudTh>VNUMs</MudTh>
            <MudTh Class="content-width"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                <MudChip Style="background-color: black;">
                    @((MarkupString)AreaConverter.ConvertExodusColor(context.AreaName))</MudChip>
            </MudTd>
            <MudTd>@context.FileName</MudTd>
            <MudTd>@context.LowLevel</MudTd>
            <MudTd>@context.HighLevel</MudTd>
            <MudTd>@context.Creator</MudTd>
            <MudTd>@context.VnumsHighLow</MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                    OnClick="@(EventCallback.Factory.Create(this, () => SelectArea(context)))"></MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}


@code {
    [Parameter]
    public List<AreaFile>? Areas { get; set; }

    [Parameter]
    public EventCallback<AreaFile> OnAreaSelected { get; set; }
    private string searchString = "";

    private bool FilterFunc(AreaFile element) =>
    Filter.FilterFunc(element, searchString, element => element.AreaName);

    private void SelectArea(AreaFile area)
    {
        if (OnAreaSelected.HasDelegate)
        {
            OnAreaSelected.InvokeAsync(area);
        }
    }
}