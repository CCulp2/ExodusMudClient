@using ExodusMudClient.Data.Game.Models
@inject IAreaFileConverter AreaConverter
@inject IDialogService DialogService

<MudTable Items="@objects" Dense="@true" Hover="@true" Bordered="@true" FixedHeader="@true"
    Filter="new Func<AreaFileObject,bool>(FilterFunc)">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Objects</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
            AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
        </MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Vnum</MudTh>
        <MudTh>Name</MudTh>
        <MudTh>Short</MudTh>
        <MudTh>Long</MudTh>
        <MudTh>Material</MudTh>
        <MudTh>Timer</MudTh>
        <MudTh>Item Type</MudTh>
        <MudTh># Extra Flags</MudTh>
        <MudTh>Extra Flags</MudTh>
        <MudTh>Wear Flags</MudTh>
        <MudTh>Classes</MudTh>
        <MudTh>Races</MudTh>
        <MudTh>Clans</MudTh>
        <MudTh>Rarity</MudTh>
        <MudTh>v0</MudTh>
        <MudTh>v1</MudTh>
        <MudTh>v2</MudTh>
        <MudTh>v3</MudTh>
        <MudTh>v4</MudTh>
        <MudTh>v5</MudTh>
        @for (var i = 7; i < 13; i++)
        {
            <MudTh>v@(i)</MudTh>
        }
        <MudTh Class="content-width"></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Vnum</MudTd>
        <MudTd>
            <MudChip Style="background-color: black;">
                @(new MarkupString($"{AreaConverter.ConvertExodusColor(context.Name)}"))
            </MudChip>
        </MudTd>
        <MudTd>
            <MudChip Style="background-color: black;">
                @(new MarkupString($"{AreaConverter.ConvertExodusColor(context.ShortDescription)}"))
            </MudChip>
        </MudTd>
        <MudTd>
            <MudChip Style="background-color: black;">
                @(new MarkupString($"{AreaConverter.ConvertExodusColor(context.LongDescription)}"))
            </MudChip>
        </MudTd>

        <MudTd>@context.Material</MudTd>
        <MudTd>@context.Timer</MudTd>
        <MudTd>@context.ItemType</MudTd>
        <MudTd>@context.ExtraFlagsNumber</MudTd>
        <MudTd>
            @if (context.ExtraFlags != null)
            {
                foreach (var flag in context.ExtraFlags)
                {
                    <MudChip Color="Color.Primary">
                        @flag
                    </MudChip>
                }
            }
        </MudTd>
        <MudTd>@context.WearFlags</MudTd>
        <MudTd>@context.ClassWearFlags</MudTd>
        <MudTd>@context.RaceWearFlags</MudTd>
        <MudTd>@context.ClanWearFlags</MudTd>
        <MudTd>@context.Rarity</MudTd>
        <MudTd>@context.Values[0]</MudTd>
        <MudTd>@context.Values[1]</MudTd>
        <MudTd>@context.Values[2]</MudTd>
        <MudTd>@context.Values[3]</MudTd>
        <MudTd>@context.Values[4]</MudTd>
        <MudTd>@context.Values[5]</MudTd>
        <MudTd>@context.Values[6]</MudTd>
        @for (var i = 7; i < 13; i++)
        {
            <MudTd>@context.Values[i]</MudTd>
        }
        <MudTd>
            <MudIconButton Icon="@Icons.Material.Filled.Edit"
                OnClick="@(EventCallback.Factory.Create(this, () => OpenObject(context)))"></MudIconButton>
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    private string searchString = "";
    private bool FilterFunc(AreaFileObject element) =>
    Filter.FilterFunc(element, searchString, (element) => element.Name, (element) => element.ShortDescription);

    [Parameter]
    public List<AreaFileObject>? objects { get; set; }

    private void OpenObject(AreaFileObject mobile)
    {

    }

}