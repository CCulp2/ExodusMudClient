@page "/KnowledgeBase"
@using Ganss.Xss
@using ExodusMudClient.Data.Game.Models
@using ExodusMudClient.Utility;
@using Newtonsoft.Json;
@using System.Linq;
@inject IHelpFileConverter __converter;
@inject IDialogService DialogService
<MudPaper Class="pa-5" Style="@($"color:{Colors.LightGreen.Accent3}; background:{Colors.BlueGrey.Darken4};")">

    <MudGrid>
        @foreach (var cat in HelpEntry.Categories)
        {
            var entriesForCat = _helpEntries.Where(h => h.Category == cat).ToList();
            <MudItem xs="4">
                <MudCard>
                    <MudCardContent>
                        <MudText>@cat</MudText>
                        <MudDivider Class="mb-2"></MudDivider>
                        @foreach (var entry in entriesForCat)
                        {
                            foreach (var tag in entry.Tags)
                            {
                                <MudChip OnClick="@(EventCallback.Factory.Create(this, () => ViewHelp(entry)))"
                                    Variant="Variant.Text" Color="Color.Info">@tag</MudChip>
                            }

                        }
                    </MudCardContent>
                </MudCard>
            </MudItem>
        }
        <MudItem xs="8">
            <MudCard>
                <MudCardContent>
                    <MudText>Uncategorized</MudText>
                    <MudDivider Class="mb-2"></MudDivider>
                    @{
                        var count = 0;
                        var uncategorized = _helpEntries.Where(h => string.IsNullOrEmpty(h.Category)).ToList();
                    }
                    @foreach (var entry in uncategorized)
                    {
                        foreach (var tag in entry.Tags)
                        {
                            count += entry.Tags.Count;
                            @* <MudChip OnClick="@(EventCallback.Factory.Create(this, () => EditHelp(entry)))"
                    Class="cursor-pointer" Variant="Variant.Text" Color="Color.Info">@tag</MudChip> *@
                        }
                    }
                    @count
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
    <br>
    <MudTable Items="@_helpEntries" Dense="@true" Hover="@true" Bordered="@true" FixedHeader="@true"
        Filter="new Func<HelpEntry, bool>(FilterFunc)" Class="mb-5">
        <ToolBarContent>
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start"
                AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0">
            </MudTextField>
            <MudButton OnClick="SaveHelps">Save All</MudButton>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Tags</MudTh>
            <MudTh>Related</MudTh>
            <MudTh>Category</MudTh>
            <MudTh Style="width: 45%; vertical-align: middle;">Help</MudTh>
            <MudTh Style="width: 1%;"></MudTh>
            <MudTh Style="width: 1%;"></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd>
                @if (context.Tags != null)
                {
                    foreach (var tag in context.Tags)
                    {
                        <MudChip Variant="Variant.Text" Color="Color.Info">@tag</MudChip>
                    }
                }
            </MudTd>
            <MudTd>
                @if (context.RelatedTags != null)
                {
                    foreach (var tag in context.RelatedTags)
                    {
                        <MudChip Variant="Variant.Text" Color="Color.Info">@tag</MudChip>
                    }
                }
            </MudTd>
            <MudTd>@context.Category</MudTd>
            <MudTd>
                <MudElement Class="d-block overflow-hidden">
                    @TruncateString(context.HelpText, 100)
                </MudElement>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete"
                    OnClick="@(EventCallback.Factory.Create(this, () => RemoveHelpEntry(context.Id)))">
                </MudIconButton>
            </MudTd>
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit"
                    OnClick="@(EventCallback.Factory.Create(this, () => EditHelp(context)))">
                </MudIconButton>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>

</MudPaper>


@code {
    private List<HelpEntry> _helpEntries = new List<HelpEntry>();
    private string searchString = "";

    private bool FilterFunc(HelpEntry element)
    {
        // Check if searchString is not null or empty to avoid unnecessary processing
        if (!string.IsNullOrEmpty(searchString))
        {
            // Attempt to match the search string with Tags first
            bool tagsMatch = element.Tags != null && element.Tags.Any(tag => tag.Contains(searchString));

            // If there's a match in Tags, we return true without checking HelpText
            if (tagsMatch)
            {
                return true;
            }
            else
            {
                // Only if there's no match in Tags, we check HelpText
                return false;
            }
        }

        // If searchString is null or empty, decide on how you want to handle this scenario.
        // For instance, you might want to return all elements:
        return true;
    }

    protected override void OnInitialized()
    {
        RefreshHelps();
    }


    private async Task RefreshHelps()
    {
        _helpEntries = __converter.GetAllHelpEntries();
        StateHasChanged();
    }

    private async Task SaveHelps()
    {
        await __converter.SaveHelps(_helpEntries);
        StateHasChanged();
    }

    private async Task RemoveHelpEntry(string id)
    {
        var parameters = new DialogParameters<ConfirmModal>();
        parameters.Add(x => x.ContentText, "Do you really want to delete this help entry? This process cannot be undone.");
        parameters.Add(x => x.ButtonText, "Delete");
        parameters.Add(x => x.Color, Color.Error);

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = DialogService.Show<ConfirmModal>("Delete", parameters, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            _helpEntries.RemoveAll(entry => entry.Id == id);
            await SaveHelps();
        }

    }

    private async Task EditHelp(HelpEntry entry)
    {
        var parameters = new DialogParameters<HelpEntryModal>();
        parameters.Add(x => x.entry, entry);
        var dialog = DialogService.Show<HelpEntryModal>("Edit Help Entry", parameters, new DialogOptions
            {
                MaxWidth = MaxWidth.Large,
                FullWidth = true,
                CloseButton = true,
                ClassBackground = "bg-blur"
            });

        var result = await dialog.Result;
        if (!result.Canceled)
        {
            // saved
            await RefreshHelps();
            StateHasChanged();
        }
    }


    public async Task ViewHelp(HelpEntry entry)
    {
        var parameters = new DialogParameters<HelpEntryModal>();
        parameters.Add(x => x.entry, entry);
        var dialog = DialogService.Show<HelpView>("", parameters, new DialogOptions
            {
                MaxWidth = MaxWidth.Small,
                FullWidth = true,
                CloseButton = true,
                ClassBackground = "bg-blur"
            });
    }


    private string TruncateString(string input, int maxLength)
    {
        // Check if the string is null or its length is less than or equal to the maxLength
        if (string.IsNullOrEmpty(input) || input.Length <= maxLength)
        {
            return input;
        }

        // If the string needs to be truncated, return the substring of the desired length
        // and append an ellipsis to indicate truncation
        return input.Substring(0, maxLength) + "...";
    }
}
