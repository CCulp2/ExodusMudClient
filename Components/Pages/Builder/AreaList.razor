@page "/Areas"
@using Ganss.Xss
@using ExodusMudClient.Data.Game.Models
@inject ITcpService TcpService
@inject IAreaFileConverter AreaConverter
@inject IWebHostEnvironment _environment
@inject IJSRuntime JSRuntime;
<style>
    .list-scrollable {
        max-height: 300px;
        /* Adjust based on your needs */
        overflow-y: auto;
        /* Enables vertical scrolling */
        padding: 8px;
        /* Optional, for inner spacing */
    }

    .list-scrollable.sidebar {
        max-height: 85vh;
    }
</style>
<MudGrid Class="mt-3">
    <MudItem lg="3">
        <MudPaper Class="list-scrollable sidebar" Elevation="3">
            <MudTreeView T="string" ExpandOnClick="true" Hover="true">
                @foreach (var area in areas)
                {
                    <MudTreeViewItem Value="@AreaConverter.ConvertExodusColor(area.AreaName.Replace("``", ""))"
                        Icon="@Icons.Material.Filled.Map" OnClick="(() => SelectArea(area))">
                        @if (selectedArea != null)
                        {
                            <Area selectedArea="selectedArea" OnMobileSelected="HandleMobileSelected"></Area>
                        }
                        else
                        {
                            <MudTreeViewItem Value="@("Loading...")" />
                        }

                    </MudTreeViewItem>
                }
            </MudTreeView>
        </MudPaper>
    </MudItem>
    <MudItem lg="9">
        @if (selectedMobile != null)
        {
            <MudPaper Class="pa-3" Elevation="3">
                <MudText Typo="Typo.h3">Mobile Information</MudText>
                <MudDivider />
                <MudField Label="Name" Variant="Variant.Outlined">@selectedMobile.NameForTargeting</MudField>
                <MudField Label="Short Description" Variant="Variant.Outlined">@selectedMobile.ShortDescription</MudField>
                <MudField Label="Long Description" Variant="Variant.Outlined">@selectedMobile.LongDescription</MudField>
                <MudField Label="Description" Variant="Variant.Outlined">@selectedMobile.Description</MudField>
                <MudGrid>
                    <MudItem lg="6">

                    </MudItem>
                    <MudItem lg="6">
                        <MudText Typo="Typo.h3">Details</MudText>
                        <MudList Clickable="false">
                            <MudListItem>Vnum: @selectedMobile.Vnum</MudListItem>
                            <MudListItem>Race: @selectedMobile.Race</MudListItem>
                            <MudListItem>Alignment: @selectedMobile.Alignment</MudListItem>
                            <MudListItem>Level: @selectedMobile.Level</MudListItem>
                            <MudListItem>Hit Roll: @selectedMobile.HitRoll</MudListItem>
                            <MudListItem>Armor Class: @(string.Join(", ", selectedMobile.ArmorClass))</MudListItem>
                            <MudListItem>Damage Type: @selectedMobile.DamageType</MudListItem>
                            <MudListItem>Sex: @selectedMobile.Sex</MudListItem>
                            <MudListItem>Size: @selectedMobile.Size</MudListItem>
                            <MudListItem>Material: @selectedMobile.Material</MudListItem>
                        </MudList>
                    </MudItem>
                    <MudItem lg="12">
                        <MudText Typo="Typo.h3">Flags</MudText>
                        <MudList Clickable="false">
                            <MudListItem>Act Flags: @string.Join(", ", selectedMobile.ActFlags)</MudListItem>
                            <MudListItem>Affect Flags: @string.Join(", ", selectedMobile.AffectFlags)</MudListItem>
                            <MudListItem>Off Flags: @selectedMobile.OffFlags</MudListItem>
                            <MudListItem>Imm Flags: @selectedMobile.ImmFlags</MudListItem>
                            <MudListItem>Res Flags: @selectedMobile.ResFlags</MudListItem>
                            <MudListItem>Vuln Flags: @selectedMobile.VulnFlags</MudListItem>
                        </MudList>
                    </MudItem>
                </MudGrid>
            </MudPaper>
        }
    </MudItem>

</MudGrid>

@code {
    // binded attributes
    public AreaFile? selectedArea = null;
    public AreaFileMobile? selectedMobile = null;
    public List<AreaFileMobile> mobilesForSelectedArea = new List<AreaFileMobile>();


    // available onload
    public List<AreaFile> areas = new List<AreaFile>();
    protected override void OnInitialized()
    {
        areas = AreaConverter.GetAreaList(Path.Combine(_environment.WebRootPath, "AreaFiles"));
    }
    private async void OnDataReceived(string data)
    {

        await InvokeAsync(() =>
        {

            StateHasChanged();
        });


    }

    private void SendData(string text)
    {

        StateHasChanged();

    }

    private void SelectMobile(AreaFileMobile mobile)
    {
        selectedMobile = mobile;
    }

    private void SelectArea(AreaFile area)
    {
        selectedArea = AreaConverter.ParseAreaFile(Path.Combine(_environment.WebRootPath, $"AreaFiles/{area.FileName}"));
        StateHasChanged();
    }

    // This method is called when a mobile is selected in the child component
    private void HandleMobileSelected(AreaFileMobile mobile)
    {
        selectedMobile = mobile;
        // Update your UI as needed to display information about the selected mobile
        StateHasChanged();
    }

}
